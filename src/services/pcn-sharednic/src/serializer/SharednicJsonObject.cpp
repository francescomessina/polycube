/**
* sharednic API
* Sharednic Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/netgroup-polito/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "SharednicJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

SharednicJsonObject::SharednicJsonObject() {

  m_nameIsSet = false;

  m_uuidIsSet = false;

  m_type = CubeType::TC;
  m_typeIsSet = false;

  m_loglevel = SharednicLoglevelEnum::INFO;
  m_loglevelIsSet = false;

  m_portsIsSet = false;

  m_action = SharednicActionEnum::DROP;
  m_actionIsSet = false;
}

SharednicJsonObject::~SharednicJsonObject() {}

void SharednicJsonObject::validateKeys() {

  if (!m_nameIsSet) {
    throw std::runtime_error("Variable name is required");
  }
}

void SharednicJsonObject::validateMandatoryFields() {

}

void SharednicJsonObject::validateParams() {

  if (m_uuidIsSet) {
    std::string patter_value = R"PATTERN([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})PATTERN";
    std::regex e (patter_value);
    if (!std::regex_match(m_uuid, e))
      throw std::runtime_error("Variable uuid has not a valid format");
  }
}

nlohmann::json SharednicJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_uuidIsSet) {
    val["uuid"] = m_uuid;
  }

  if (m_typeIsSet) {
    val["type"] = CubeType_to_string(m_type);
  }

  if (m_loglevelIsSet) {
    val["loglevel"] = SharednicLoglevelEnum_to_string(m_loglevel);
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }
  if (m_actionIsSet) {
    val["action"] = SharednicActionEnum_to_string(m_action);
  }


  return val;
}

void SharednicJsonObject::fromJson(nlohmann::json& val) {
  for(nlohmann::json::iterator it = val.begin(); it != val.end(); ++it) {
    std::string key = it.key();
    bool found = (std::find(allowedParameters_.begin(), allowedParameters_.end(), key) != allowedParameters_.end());
    if (!found) {
      throw std::runtime_error(key + " is not a valid parameter");
      return;
    }
  }

  if (val.find("name") != val.end()) {
    setName(val.at("name"));
  }

  if (val.find("uuid") != val.end()) {
    setUuid(val.at("uuid"));
  }

  if (val.find("type") != val.end()) {
    setType(string_to_CubeType(val.at("type")));
  }

  if (val.find("loglevel") != val.end()) {
    setLoglevel(string_to_SharednicLoglevelEnum(val.at("loglevel")));
  }

  m_ports.clear();
  for (auto& item : val["ports"]) {

    PortsJsonObject newItem;
    newItem.fromJson(item);
    m_ports.push_back(newItem);
    m_portsIsSet = true;
  }


  if (val.find("action") != val.end()) {
    setAction(string_to_SharednicActionEnum(val.at("action")));
  }
}

nlohmann::json SharednicJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["name"]["name"] = "name";
  val["name"]["type"] = "key";
  val["name"]["simpletype"] = "string";
  val["name"]["description"] = R"POLYCUBE(Name of the sharednic service)POLYCUBE";
  val["name"]["example"] = R"POLYCUBE(sharednic1)POLYCUBE";

  return val;
}

nlohmann::json SharednicJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();

  val["uuid"]["name"] = "uuid";
  val["uuid"]["type"] = "leaf"; // Suppose that type is leaf
  val["uuid"]["simpletype"] = "string";
  val["uuid"]["description"] = R"POLYCUBE(UUID of the Cube)POLYCUBE";
  val["uuid"]["example"] = R"POLYCUBE()POLYCUBE";
  val["type"]["name"] = "type";
  val["type"]["type"] = "leaf"; // Suppose that type is leaf
  val["type"]["simpletype"] = "string";
  val["type"]["description"] = R"POLYCUBE(Type of the Cube (TC, XDP_SKB, XDP_DRV))POLYCUBE";
  val["type"]["example"] = R"POLYCUBE(TC)POLYCUBE";
  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["type"] = "leaf"; // Suppose that type is leaf
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";
  val["ports"]["name"] = "ports";
  val["ports"]["type"] = "leaf"; // Suppose that type is leaf
  val["ports"]["type"] = "list";
  val["ports"]["description"] = R"POLYCUBE(Entry of the ports table)POLYCUBE";
  val["ports"]["example"] = R"POLYCUBE()POLYCUBE";
  val["action"]["name"] = "action";
  val["action"]["type"] = "leaf"; // Suppose that type is leaf
  val["action"]["simpletype"] = "string";
  val["action"]["description"] = R"POLYCUBE(Action performed on the received packet (i.e., DROP, LINUX, or POLYCUBE; default: DROP))POLYCUBE";
  val["action"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json SharednicJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();

  val["loglevel"]["name"] = "loglevel";
  val["loglevel"]["simpletype"] = "string";
  val["loglevel"]["description"] = R"POLYCUBE(Defines the logging level of a service instance, from none (OFF) to the most verbose (TRACE))POLYCUBE";
  val["loglevel"]["example"] = R"POLYCUBE(INFO)POLYCUBE";
  val["action"]["name"] = "action";
  val["action"]["simpletype"] = "string";
  val["action"]["description"] = R"POLYCUBE(Action performed on the received packet (i.e., DROP, LINUX, or POLYCUBE; default: DROP))POLYCUBE";
  val["action"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

nlohmann::json SharednicJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();

  val["ports"]["name"] = "ports";
  val["ports"]["type"] = "list";
  val["ports"]["description"] = R"POLYCUBE(Entry of the ports table)POLYCUBE";
  val["ports"]["example"] = R"POLYCUBE()POLYCUBE";

  return val;
}

std::vector<std::string> SharednicJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

std::string SharednicJsonObject::getName() const {
  return m_name;
}

void SharednicJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool SharednicJsonObject::nameIsSet() const {
  return m_nameIsSet;
}

void SharednicJsonObject::unsetName() {
  m_nameIsSet = false;
}



std::string SharednicJsonObject::getUuid() const {
  return m_uuid;
}

void SharednicJsonObject::setUuid(std::string value) {
  m_uuid = value;
  m_uuidIsSet = true;
}

bool SharednicJsonObject::uuidIsSet() const {
  return m_uuidIsSet;
}

void SharednicJsonObject::unsetUuid() {
  m_uuidIsSet = false;
}



CubeType SharednicJsonObject::getType() const {
  return m_type;
}

void SharednicJsonObject::setType(CubeType value) {
  m_type = value;
  m_typeIsSet = true;
}

bool SharednicJsonObject::typeIsSet() const {
  return m_typeIsSet;
}

void SharednicJsonObject::unsetType() {
  m_typeIsSet = false;
}

std::string SharednicJsonObject::CubeType_to_string(const CubeType &value){
  switch(value){
    case CubeType::TC:
      return std::string("tc");
    case CubeType::XDP_SKB:
      return std::string("xdp_skb");
    case CubeType::XDP_DRV:
      return std::string("xdp_drv");
    default:
      throw std::runtime_error("Bad Sharednic type");
  }
}

CubeType SharednicJsonObject::string_to_CubeType(const std::string &str){
  if (JsonObjectBase::iequals("tc", str))
    return CubeType::TC;
  if (JsonObjectBase::iequals("xdp_skb", str))
    return CubeType::XDP_SKB;
  if (JsonObjectBase::iequals("xdp_drv", str))
    return CubeType::XDP_DRV;
  throw std::runtime_error("Sharednic type is invalid");
}


SharednicLoglevelEnum SharednicJsonObject::getLoglevel() const {
  return m_loglevel;
}

void SharednicJsonObject::setLoglevel(SharednicLoglevelEnum value) {
  m_loglevel = value;
  m_loglevelIsSet = true;
}

bool SharednicJsonObject::loglevelIsSet() const {
  return m_loglevelIsSet;
}

void SharednicJsonObject::unsetLoglevel() {
  m_loglevelIsSet = false;
}

std::string SharednicJsonObject::SharednicLoglevelEnum_to_string(const SharednicLoglevelEnum &value){
  switch(value){
    case SharednicLoglevelEnum::TRACE:
      return std::string("trace");
    case SharednicLoglevelEnum::DEBUG:
      return std::string("debug");
    case SharednicLoglevelEnum::INFO:
      return std::string("info");
    case SharednicLoglevelEnum::WARN:
      return std::string("warn");
    case SharednicLoglevelEnum::ERR:
      return std::string("err");
    case SharednicLoglevelEnum::CRITICAL:
      return std::string("critical");
    case SharednicLoglevelEnum::OFF:
      return std::string("off");
    default:
      throw std::runtime_error("Bad Sharednic loglevel");
  }
}

SharednicLoglevelEnum SharednicJsonObject::string_to_SharednicLoglevelEnum(const std::string &str){
  if (JsonObjectBase::iequals("trace", str))
    return SharednicLoglevelEnum::TRACE;
  if (JsonObjectBase::iequals("debug", str))
    return SharednicLoglevelEnum::DEBUG;
  if (JsonObjectBase::iequals("info", str))
    return SharednicLoglevelEnum::INFO;
  if (JsonObjectBase::iequals("warn", str))
    return SharednicLoglevelEnum::WARN;
  if (JsonObjectBase::iequals("err", str))
    return SharednicLoglevelEnum::ERR;
  if (JsonObjectBase::iequals("critical", str))
    return SharednicLoglevelEnum::CRITICAL;
  if (JsonObjectBase::iequals("off", str))
    return SharednicLoglevelEnum::OFF;
  throw std::runtime_error("Sharednic loglevel is invalid");
}

  polycube::LogLevel SharednicJsonObject::getPolycubeLoglevel() const {
    switch(m_loglevel) {
      case SharednicLoglevelEnum::TRACE:
        return polycube::LogLevel::TRACE;
      case SharednicLoglevelEnum::DEBUG:
        return polycube::LogLevel::DEBUG;
      case SharednicLoglevelEnum::INFO:
        return polycube::LogLevel::INFO;
      case SharednicLoglevelEnum::WARN:
        return polycube::LogLevel::WARN;
      case SharednicLoglevelEnum::ERR:
        return polycube::LogLevel::ERR;
      case SharednicLoglevelEnum::CRITICAL:
        return polycube::LogLevel::CRITICAL;
      case SharednicLoglevelEnum::OFF:
        return polycube::LogLevel::OFF;
    }
  }
const std::vector<PortsJsonObject>& SharednicJsonObject::getPorts() const{
  return m_ports;
}

void SharednicJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
}


bool SharednicJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void SharednicJsonObject::unsetPorts() {
  m_portsIsSet = false;
}



SharednicActionEnum SharednicJsonObject::getAction() const {
  return m_action;
}

void SharednicJsonObject::setAction(SharednicActionEnum value) {
  m_action = value;
  m_actionIsSet = true;
}

bool SharednicJsonObject::actionIsSet() const {
  return m_actionIsSet;
}

void SharednicJsonObject::unsetAction() {
  m_actionIsSet = false;
}

std::string SharednicJsonObject::SharednicActionEnum_to_string(const SharednicActionEnum &value){
  switch(value){
    case SharednicActionEnum::DROP:
      return std::string("drop");
    case SharednicActionEnum::LINUX:
      return std::string("linux");
    case SharednicActionEnum::POLYCUBE:
      return std::string("polycube");
    default:
      throw std::runtime_error("Bad Sharednic action");
  }
}

SharednicActionEnum SharednicJsonObject::string_to_SharednicActionEnum(const std::string &str){
  if (JsonObjectBase::iequals("drop", str))
    return SharednicActionEnum::DROP;
  if (JsonObjectBase::iequals("linux", str))
    return SharednicActionEnum::LINUX;
  if (JsonObjectBase::iequals("polycube", str))
    return SharednicActionEnum::POLYCUBE;
  throw std::runtime_error("Sharednic action is invalid");
}



}
}
}
}

