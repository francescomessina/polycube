/**
* router API
* router API generated from router.yang
*
* OpenAPI spec version: 1.0.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/polycube-network/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "RouterJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

RouterJsonObject::RouterJsonObject() {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_routeIsSet = false;
  m_arpEntryIsSet = false;
  m_shadow = false;
  m_shadowIsSet = true;
  m_debugmod = false;
  m_debugmodIsSet = true;
}

RouterJsonObject::RouterJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_portsIsSet = false;
  m_routeIsSet = false;
  m_arpEntryIsSet = false;
  m_shadowIsSet = false;
  m_debugmodIsSet = false;

  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("shadow")) {
    setShadow(val.at("shadow").get<bool>());
  }

  if (val.count("debugmod")) {
    setDebugmod(val.at("debugmod").get<bool>());
  }

  if (val.count("ports")) {
    for (auto& item : val["ports"]) {
      PortsJsonObject newItem{ item };
      m_ports.push_back(newItem);
    }

    m_portsIsSet = true;
  }

  if (val.count("route")) {
    for (auto& item : val["route"]) {
      RouteJsonObject newItem{ item };
      m_route.push_back(newItem);
    }

    m_routeIsSet = true;
  }

  if (val.count("arp-entry")) {
    for (auto& item : val["arp-entry"]) {
      ArpEntryJsonObject newItem{ item };
      m_arpEntry.push_back(newItem);
    }

    m_arpEntryIsSet = true;
  }
}

nlohmann::json RouterJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_shadowIsSet) {
    val["shadow"] = m_shadow;
  }

  if (m_debugmodIsSet) {
    val["debugmod"] = m_debugmod;
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_ports) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["ports"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_route) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["route"] = jsonArray;
    }
  }

  {
    nlohmann::json jsonArray;
    for (auto& item : m_arpEntry) {
      jsonArray.push_back(JsonObjectBase::toJson(item));
    }

    if (jsonArray.size() > 0) {
      val["arp-entry"] = jsonArray;
    }
  }

  return val;
}

std::string RouterJsonObject::getName() const {
  return m_name;
}

void RouterJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool RouterJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



const std::vector<PortsJsonObject>& RouterJsonObject::getPorts() const{
  return m_ports;
}

void RouterJsonObject::addPorts(PortsJsonObject value) {
  m_ports.push_back(value);
  m_portsIsSet = true;
}


bool RouterJsonObject::portsIsSet() const {
  return m_portsIsSet;
}

void RouterJsonObject::unsetPorts() {
  m_portsIsSet = false;
}

const std::vector<RouteJsonObject>& RouterJsonObject::getRoute() const{
  return m_route;
}

void RouterJsonObject::addRoute(RouteJsonObject value) {
  m_route.push_back(value);
  m_routeIsSet = true;
}


bool RouterJsonObject::routeIsSet() const {
  return m_routeIsSet;
}

void RouterJsonObject::unsetRoute() {
  m_routeIsSet = false;
}

const std::vector<ArpEntryJsonObject>& RouterJsonObject::getArpEntry() const{
  return m_arpEntry;
}

void RouterJsonObject::addArpEntry(ArpEntryJsonObject value) {
  m_arpEntry.push_back(value);
  m_arpEntryIsSet = true;
}


bool RouterJsonObject::arpEntryIsSet() const {
  return m_arpEntryIsSet;
}

void RouterJsonObject::unsetArpEntry() {
  m_arpEntryIsSet = false;
}

bool RouterJsonObject::getShadow() const {
  return m_shadow;
}

void RouterJsonObject::setShadow(bool value) {
  m_shadow = value;
  m_shadowIsSet = true;
}

bool RouterJsonObject::shadowIsSet() const {
  return m_shadowIsSet;
}

void RouterJsonObject::unsetShadow() {
  m_shadowIsSet = false;
}

bool RouterJsonObject::getDebugmod() const {
  return m_debugmod;
}

void RouterJsonObject::setDebugmod(bool value) {
  m_debugmod = value;
  m_debugmodIsSet = true;
}

bool RouterJsonObject::debugmodIsSet() const {
  return m_debugmodIsSet;
}

void RouterJsonObject::unsetDebugmod() {
  m_debugmodIsSet = false;
}

}
}
}
}
