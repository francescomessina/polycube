/**
* router API
* Router Service
*
* OpenAPI spec version: 2.0
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/netgroup-polito/swagger-codegen.git
* branch polycube
*/


/* Do not edit this file manually */



#include "PortsSecondaryipJsonObject.h"
#include <regex>

namespace io {
namespace swagger {
namespace server {
namespace model {

PortsSecondaryipJsonObject::PortsSecondaryipJsonObject() {

  m_ipIsSet = false;

  m_netmaskIsSet = false;
}

PortsSecondaryipJsonObject::~PortsSecondaryipJsonObject() {}

void PortsSecondaryipJsonObject::validateKeys() {

  if (!m_ipIsSet) {
    throw std::runtime_error("Variable ip is required");
  }
  if (!m_netmaskIsSet) {
    throw std::runtime_error("Variable netmask is required");
  }
}

void PortsSecondaryipJsonObject::validateMandatoryFields() {

}

void PortsSecondaryipJsonObject::validateParams() {

  if (m_ipIsSet) {
    std::string patter_value = R"PATTERN((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?)PATTERN";
    std::regex e (patter_value);
    if (!std::regex_match(m_ip, e))
      throw std::runtime_error("Variable ip has not a valid format");
  }
  if (m_netmaskIsSet) {
    std::string patter_value = R"PATTERN((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?)PATTERN";
    std::regex e (patter_value);
    if (!std::regex_match(m_netmask, e))
      throw std::runtime_error("Variable netmask has not a valid format");
  }
}

nlohmann::json PortsSecondaryipJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();

  if (m_ipIsSet) {
    val["ip"] = m_ip;
  }

  if (m_netmaskIsSet) {
    val["netmask"] = m_netmask;
  }


  return val;
}

void PortsSecondaryipJsonObject::fromJson(nlohmann::json& val) {
  for(nlohmann::json::iterator it = val.begin(); it != val.end(); ++it) {
    std::string key = it.key();
    bool found = (std::find(allowedParameters_.begin(), allowedParameters_.end(), key) != allowedParameters_.end());
    if (!found) {
      throw std::runtime_error(key + " is not a valid parameter");
      return;
    }
  }

  if (val.find("ip") != val.end()) {
    setIp(val.at("ip"));
  }

  if (val.find("netmask") != val.end()) {
    setNetmask(val.at("netmask"));
  }
}

nlohmann::json PortsSecondaryipJsonObject::helpKeys() {
  nlohmann::json val = nlohmann::json::object();

  val["ip"]["name"] = "ip";
  val["ip"]["type"] = "key";
  val["ip"]["simpletype"] = "string";
  val["ip"]["description"] = R"POLYCUBE(Seconadary IP address of the port)POLYCUBE";
  val["ip"]["example"] = R"POLYCUBE(207.46.131.1)POLYCUBE";
  val["netmask"]["name"] = "netmask";
  val["netmask"]["type"] = "key";
  val["netmask"]["simpletype"] = "string";
  val["netmask"]["description"] = R"POLYCUBE(Secondary netmask of the port)POLYCUBE";
  val["netmask"]["example"] = R"POLYCUBE(255.255.255.0)POLYCUBE";

  return val;
}

nlohmann::json PortsSecondaryipJsonObject::helpElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

nlohmann::json PortsSecondaryipJsonObject::helpWritableLeafs() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

nlohmann::json PortsSecondaryipJsonObject::helpComplexElements() {
  nlohmann::json val = nlohmann::json::object();


  return val;
}

std::vector<std::string> PortsSecondaryipJsonObject::helpActions() {
  std::vector<std::string> val;
  return val;
}

std::string PortsSecondaryipJsonObject::getIp() const {
  return m_ip;
}

void PortsSecondaryipJsonObject::setIp(std::string value) {
  m_ip = value;
  m_ipIsSet = true;
}

bool PortsSecondaryipJsonObject::ipIsSet() const {
  return m_ipIsSet;
}

void PortsSecondaryipJsonObject::unsetIp() {
  m_ipIsSet = false;
}



std::string PortsSecondaryipJsonObject::getNetmask() const {
  return m_netmask;
}

void PortsSecondaryipJsonObject::setNetmask(std::string value) {
  m_netmask = value;
  m_netmaskIsSet = true;
}

bool PortsSecondaryipJsonObject::netmaskIsSet() const {
  return m_netmaskIsSet;
}

void PortsSecondaryipJsonObject::unsetNetmask() {
  m_netmaskIsSet = false;
}




}
}
}
}

